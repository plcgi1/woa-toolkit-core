#!/usr/bin/perl -w
package main;
use strict;
use Test::More qw(no_plan);
use FindBin qw($Bin);
use lib ( $Bin . '/../lib', $Bin . '/lib', );

BEGIN { use_ok '[%service_name%]::SP' }

[%service_name%]::Tester->process();

package [%service_name%]::Tester;
use strict;
use [%service_name%]::SP;
use [%service_name%]::Map;
     
use WOA::REST::Generic::Request;
use WOA::Test::Data;
use Data::Dumper;

use base 'WOA::Test::Base';

my $CLASS = __PACKAGE__;

my ($sp,$map,$good_data,$bad_data,$rest,$req);

sub set_up {
    my $self = shift;
    
    my $tb = __PACKAGE__->builder;
        
    $sp = [%service_name%]::SP->new;
    $rest = $sp->service_object();
    $map = [%service_name%]::Map::get_map;
    
    return;
}

sub tear_down {
    return '';
}

sub run {
    my($self,$methods) = @_;
    my $tb = __PACKAGE__->builder;
    
    $good_data = $methods->data_for_service($good_data,$map,WOA::Test::Data::good_data);
    $bad_data = $methods->data_for_service($bad_data,$map,WOA::Test::Data::bad_data,1);

    my ($res,$req);
    foreach (@$map) {
        if ($_->{in} && $_->{in}->{param}) {
            $req = $methods->set_request($_,$good_data->{$_->{func_name}});
            $rest->request($req);
            $res = $rest->process;
            my $re = $methods->status_re_for_test($_->{req_method});
            $tb->like($rest->status, $re,$_->{req_method}.": response OK");
        }
    }
    #my $req = WOA::REST::Generic::Request->new ( PUT => '/put/1/2') ;
    #$rest->request($req);
    
    # $res = $rest->process;
    
    # $tb->like($rest->status, qr/303/,"PUT: response OK");
    # $tb->is_eq($rest->location, '/redirect/location',"PUT: redirect");
    # bad_data(
    #     $tb,
    #     $req,
    #     'PUT',
    #     ['/put/12d/3','/put/12/3d','/put/12/3/']
    # );
    # bad_method(
    #     $tb,
    #     $req,
    #     '/put/1/2',
    #     ['GET','POST','DELETE']
    # );
    
    # $req = WOA::REST::Generic::Request->new ( POST => '/post') ;
    # $req->content('one=12&two=3');
    # $rest->request($req);

    # $res = $rest->process;
    
    # $tb->like($rest->status, qr/303/,"POST: response OK");
    # $tb->is_eq($rest->location, '/12/3',"POST: redirect");
    # bad_method(
    #     $tb,
    #     $req,
    #     '/post',
    #     ['GET','PUT','DELETE']
    # );

    # $req->content('one=12b&two=3');
    # $rest->request($req);
    # $res = $rest->process;
    # $tb->like($rest->status, qr/400/,"POST: response ".$rest->status);
    
    # $req = WOA::REST::Generic::Request->new ( DELETE => '/delete') ;
    # $req->content('what=12');
    # $rest->request($req);
    # $res = $rest->process;
    # $tb->like($rest->status, qr/204/,"DELETE: response OK");
    # bad_method(
    #     $tb,
    #     $req,
    #     '/delete',
    #     ['GET','PUT','POST']
    # );
    
    # $req = WOA::REST::Generic::Request->new ( GET => '/version') ;
    # $rest->request($req);
    # $res = $rest->process;
    # $tb->like($rest->status, qr/200/,"GET: response OK");
    # $tb->like($rest->output, qr/VERSION/,"GET: content");
    # bad_method(
    #     $tb,
    #     $req,
    #     '/version',
    #     ['DELETE','PUT','POST']
    # );
    
    # $req = WOA::REST::Generic::Request->new ( GET => '/getparams?what=thing&what2=thing2') ;
    # $rest->request($req);
    # $res = $rest->process;
    # $tb->like($rest->status, qr/200/,"GET: response OK");
    # $tb->like($rest->output, qr/thing thing2/,"GET: content");
    # bad_data(
    #     $tb,
    #     $req,
    #     'GET',
    #     [
    #         '/getparams?what=thing&what2=thing',
    #         '/getparam?what=thing&what2=thing2',
    #         '/getparams?what=thing2&what2=thing2',
    #         '/getparams?what2=thing2',
    #         '/getparams?what=thing'
    #     ]
    # );
    # bad_method(
    #     $tb,
    #     $req,
    #     '/getparams?what=thing&what2=thing2',
    #     ['DELETE','PUT','POST']
    # );
    
    return;
}

1;
